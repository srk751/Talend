// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package test.joinexample_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: JoinExample Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.4.1.20170623_1246
 * @status 
 */
public class JoinExample implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "JoinExample";
	private final String projectName = "TEST";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					JoinExample.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(JoinExample.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tMSSqlConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMSSqlConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMSSqlInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMSSqlConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMSSqlConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMSSqlConnection_1 begin ] start
				 */

				ok_Hash.put("tMSSqlConnection_1", false);
				start_Hash
						.put("tMSSqlConnection_1", System.currentTimeMillis());

				currentComponent = "tMSSqlConnection_1";

				int tos_count_tMSSqlConnection_1 = 0;

				class BytesLimit65535_tMSSqlConnection_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMSSqlConnection_1().limitLog4jByte();

				String url_tMSSqlConnection_1 = "jdbc:sqlserver://"
						+ "LAPTOP-OLPHKPFU";
				String port_tMSSqlConnection_1 = "1433";
				String dbname_tMSSqlConnection_1 = "AdventureWorksDW2014";
				if (!"".equals(port_tMSSqlConnection_1)) {
					url_tMSSqlConnection_1 += ":" + "1433";
				}
				if (!"".equals(dbname_tMSSqlConnection_1)) {

					url_tMSSqlConnection_1 += ";databaseName="
							+ "AdventureWorksDW2014";
				}
				url_tMSSqlConnection_1 += ";appName=" + projectName + ";" + "";

				String dbUser_tMSSqlConnection_1 = "sa";

				final String decryptedPassword_tMSSqlConnection_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("7a440551249af37a");
				String dbPwd_tMSSqlConnection_1 = decryptedPassword_tMSSqlConnection_1;

				java.sql.Connection conn_tMSSqlConnection_1 = null;

				String driverClass_tMSSqlConnection_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
				java.lang.Class.forName(driverClass_tMSSqlConnection_1);

				conn_tMSSqlConnection_1 = java.sql.DriverManager.getConnection(
						url_tMSSqlConnection_1, dbUser_tMSSqlConnection_1,
						dbPwd_tMSSqlConnection_1);

				globalMap.put("conn_tMSSqlConnection_1",
						conn_tMSSqlConnection_1);
				if (null != conn_tMSSqlConnection_1) {

					conn_tMSSqlConnection_1.setAutoCommit(false);
				}

				globalMap.put("dbschema_tMSSqlConnection_1", "");

				globalMap.put("db_tMSSqlConnection_1", "AdventureWorksDW2014");

				globalMap.put("conn_tMSSqlConnection_1",
						conn_tMSSqlConnection_1);

				globalMap.put("shareIdentitySetting_tMSSqlConnection_1", false);

				/**
				 * [tMSSqlConnection_1 begin ] stop
				 */

				/**
				 * [tMSSqlConnection_1 main ] start
				 */

				currentComponent = "tMSSqlConnection_1";

				tos_count_tMSSqlConnection_1++;

				/**
				 * [tMSSqlConnection_1 main ] stop
				 */

				/**
				 * [tMSSqlConnection_1 end ] start
				 */

				currentComponent = "tMSSqlConnection_1";

				ok_Hash.put("tMSSqlConnection_1", true);
				end_Hash.put("tMSSqlConnection_1", System.currentTimeMillis());

				/**
				 * [tMSSqlConnection_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tMSSqlConnection_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tMSSqlInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMSSqlConnection_1 finally ] start
				 */

				currentComponent = "tMSSqlConnection_1";

				/**
				 * [tMSSqlConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMSSqlConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TEST_JoinExample = new byte[0];
		static byte[] commonByteArray_TEST_JoinExample = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int CustomerKey;

		public int getCustomerKey() {
			return this.CustomerKey;
		}

		public Integer GeographyKey;

		public Integer getGeographyKey() {
			return this.GeographyKey;
		}

		public String CustomerAlternateKey;

		public String getCustomerAlternateKey() {
			return this.CustomerAlternateKey;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public String FirstName;

		public String getFirstName() {
			return this.FirstName;
		}

		public String MiddleName;

		public String getMiddleName() {
			return this.MiddleName;
		}

		public String LastName;

		public String getLastName() {
			return this.LastName;
		}

		public Boolean NameStyle;

		public Boolean getNameStyle() {
			return this.NameStyle;
		}

		public java.util.Date BirthDate;

		public java.util.Date getBirthDate() {
			return this.BirthDate;
		}

		public String MaritalStatus;

		public String getMaritalStatus() {
			return this.MaritalStatus;
		}

		public String Suffix;

		public String getSuffix() {
			return this.Suffix;
		}

		public String Gender;

		public String getGender() {
			return this.Gender;
		}

		public String EmailAddress;

		public String getEmailAddress() {
			return this.EmailAddress;
		}

		public Object YearlyIncome;

		public Object getYearlyIncome() {
			return this.YearlyIncome;
		}

		public Short TotalChildren;

		public Short getTotalChildren() {
			return this.TotalChildren;
		}

		public Short NumberChildrenAtHome;

		public Short getNumberChildrenAtHome() {
			return this.NumberChildrenAtHome;
		}

		public String EnglishEducation;

		public String getEnglishEducation() {
			return this.EnglishEducation;
		}

		public String SpanishEducation;

		public String getSpanishEducation() {
			return this.SpanishEducation;
		}

		public String FrenchEducation;

		public String getFrenchEducation() {
			return this.FrenchEducation;
		}

		public String EnglishOccupation;

		public String getEnglishOccupation() {
			return this.EnglishOccupation;
		}

		public String SpanishOccupation;

		public String getSpanishOccupation() {
			return this.SpanishOccupation;
		}

		public String FrenchOccupation;

		public String getFrenchOccupation() {
			return this.FrenchOccupation;
		}

		public String HouseOwnerFlag;

		public String getHouseOwnerFlag() {
			return this.HouseOwnerFlag;
		}

		public Short NumberCarsOwned;

		public Short getNumberCarsOwned() {
			return this.NumberCarsOwned;
		}

		public String AddressLine1;

		public String getAddressLine1() {
			return this.AddressLine1;
		}

		public String AddressLine2;

		public String getAddressLine2() {
			return this.AddressLine2;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public java.util.Date DateFirstPurchase;

		public java.util.Date getDateFirstPurchase() {
			return this.DateFirstPurchase;
		}

		public String CommuteDistance;

		public String getCommuteDistance() {
			return this.CommuteDistance;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.CustomerKey;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.CustomerKey != other.CustomerKey)
				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.CustomerKey = this.CustomerKey;
			other.GeographyKey = this.GeographyKey;
			other.CustomerAlternateKey = this.CustomerAlternateKey;
			other.Title = this.Title;
			other.FirstName = this.FirstName;
			other.MiddleName = this.MiddleName;
			other.LastName = this.LastName;
			other.NameStyle = this.NameStyle;
			other.BirthDate = this.BirthDate;
			other.MaritalStatus = this.MaritalStatus;
			other.Suffix = this.Suffix;
			other.Gender = this.Gender;
			other.EmailAddress = this.EmailAddress;
			other.YearlyIncome = this.YearlyIncome;
			other.TotalChildren = this.TotalChildren;
			other.NumberChildrenAtHome = this.NumberChildrenAtHome;
			other.EnglishEducation = this.EnglishEducation;
			other.SpanishEducation = this.SpanishEducation;
			other.FrenchEducation = this.FrenchEducation;
			other.EnglishOccupation = this.EnglishOccupation;
			other.SpanishOccupation = this.SpanishOccupation;
			other.FrenchOccupation = this.FrenchOccupation;
			other.HouseOwnerFlag = this.HouseOwnerFlag;
			other.NumberCarsOwned = this.NumberCarsOwned;
			other.AddressLine1 = this.AddressLine1;
			other.AddressLine2 = this.AddressLine2;
			other.Phone = this.Phone;
			other.DateFirstPurchase = this.DateFirstPurchase;
			other.CommuteDistance = this.CommuteDistance;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.CustomerKey = this.CustomerKey;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TEST_JoinExample.length) {
					if (length < 1024
							&& commonByteArray_TEST_JoinExample.length == 0) {
						commonByteArray_TEST_JoinExample = new byte[1024];
					} else {
						commonByteArray_TEST_JoinExample = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TEST_JoinExample, 0, length);
				strReturn = new String(commonByteArray_TEST_JoinExample, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TEST_JoinExample) {

				try {

					int length = 0;

					this.CustomerKey = dis.readInt();

					this.GeographyKey = readInteger(dis);

					this.CustomerAlternateKey = readString(dis);

					this.Title = readString(dis);

					this.FirstName = readString(dis);

					this.MiddleName = readString(dis);

					this.LastName = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NameStyle = null;
					} else {
						this.NameStyle = dis.readBoolean();
					}

					this.BirthDate = readDate(dis);

					this.MaritalStatus = readString(dis);

					this.Suffix = readString(dis);

					this.Gender = readString(dis);

					this.EmailAddress = readString(dis);

					this.YearlyIncome = (Object) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.TotalChildren = null;
					} else {
						this.TotalChildren = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NumberChildrenAtHome = null;
					} else {
						this.NumberChildrenAtHome = dis.readShort();
					}

					this.EnglishEducation = readString(dis);

					this.SpanishEducation = readString(dis);

					this.FrenchEducation = readString(dis);

					this.EnglishOccupation = readString(dis);

					this.SpanishOccupation = readString(dis);

					this.FrenchOccupation = readString(dis);

					this.HouseOwnerFlag = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.NumberCarsOwned = null;
					} else {
						this.NumberCarsOwned = dis.readShort();
					}

					this.AddressLine1 = readString(dis);

					this.AddressLine2 = readString(dis);

					this.Phone = readString(dis);

					this.DateFirstPurchase = readDate(dis);

					this.CommuteDistance = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.CustomerKey);

				// Integer

				writeInteger(this.GeographyKey, dos);

				// String

				writeString(this.CustomerAlternateKey, dos);

				// String

				writeString(this.Title, dos);

				// String

				writeString(this.FirstName, dos);

				// String

				writeString(this.MiddleName, dos);

				// String

				writeString(this.LastName, dos);

				// Boolean

				if (this.NameStyle == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.NameStyle);
				}

				// java.util.Date

				writeDate(this.BirthDate, dos);

				// String

				writeString(this.MaritalStatus, dos);

				// String

				writeString(this.Suffix, dos);

				// String

				writeString(this.Gender, dos);

				// String

				writeString(this.EmailAddress, dos);

				// Object

				dos.writeObject(this.YearlyIncome);

				// Short

				if (this.TotalChildren == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.TotalChildren);
				}

				// Short

				if (this.NumberChildrenAtHome == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.NumberChildrenAtHome);
				}

				// String

				writeString(this.EnglishEducation, dos);

				// String

				writeString(this.SpanishEducation, dos);

				// String

				writeString(this.FrenchEducation, dos);

				// String

				writeString(this.EnglishOccupation, dos);

				// String

				writeString(this.SpanishOccupation, dos);

				// String

				writeString(this.FrenchOccupation, dos);

				// String

				writeString(this.HouseOwnerFlag, dos);

				// Short

				if (this.NumberCarsOwned == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.NumberCarsOwned);
				}

				// String

				writeString(this.AddressLine1, dos);

				// String

				writeString(this.AddressLine2, dos);

				// String

				writeString(this.Phone, dos);

				// java.util.Date

				writeDate(this.DateFirstPurchase, dos);

				// String

				writeString(this.CommuteDistance, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerKey=" + String.valueOf(CustomerKey));
			sb.append(",GeographyKey=" + String.valueOf(GeographyKey));
			sb.append(",CustomerAlternateKey=" + CustomerAlternateKey);
			sb.append(",Title=" + Title);
			sb.append(",FirstName=" + FirstName);
			sb.append(",MiddleName=" + MiddleName);
			sb.append(",LastName=" + LastName);
			sb.append(",NameStyle=" + String.valueOf(NameStyle));
			sb.append(",BirthDate=" + String.valueOf(BirthDate));
			sb.append(",MaritalStatus=" + MaritalStatus);
			sb.append(",Suffix=" + Suffix);
			sb.append(",Gender=" + Gender);
			sb.append(",EmailAddress=" + EmailAddress);
			sb.append(",YearlyIncome=" + String.valueOf(YearlyIncome));
			sb.append(",TotalChildren=" + String.valueOf(TotalChildren));
			sb.append(",NumberChildrenAtHome="
					+ String.valueOf(NumberChildrenAtHome));
			sb.append(",EnglishEducation=" + EnglishEducation);
			sb.append(",SpanishEducation=" + SpanishEducation);
			sb.append(",FrenchEducation=" + FrenchEducation);
			sb.append(",EnglishOccupation=" + EnglishOccupation);
			sb.append(",SpanishOccupation=" + SpanishOccupation);
			sb.append(",FrenchOccupation=" + FrenchOccupation);
			sb.append(",HouseOwnerFlag=" + HouseOwnerFlag);
			sb.append(",NumberCarsOwned=" + String.valueOf(NumberCarsOwned));
			sb.append(",AddressLine1=" + AddressLine1);
			sb.append(",AddressLine2=" + AddressLine2);
			sb.append(",Phone=" + Phone);
			sb.append(",DateFirstPurchase=" + String.valueOf(DateFirstPurchase));
			sb.append(",CommuteDistance=" + CommuteDistance);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CustomerKey,
					other.CustomerKey);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMSSqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMSSqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tLogRow_1 = 0;

				class BytesLimit65535_tLogRow_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tLogRow_1().limitLog4jByte();

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tMSSqlInput_1 begin ] start
				 */

				ok_Hash.put("tMSSqlInput_1", false);
				start_Hash.put("tMSSqlInput_1", System.currentTimeMillis());

				currentComponent = "tMSSqlInput_1";

				int tos_count_tMSSqlInput_1 = 0;

				class BytesLimit65535_tMSSqlInput_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMSSqlInput_1().limitLog4jByte();

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tMSSqlInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tMSSqlInput_1 = new java.util.ArrayList();
				String[] talendToDBArray_tMSSqlInput_1 = new String[] {
						"FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tMSSqlInput_1,
						talendToDBArray_tMSSqlInput_1);
				int nb_line_tMSSqlInput_1 = 0;
				java.sql.Connection conn_tMSSqlInput_1 = null;
				conn_tMSSqlInput_1 = (java.sql.Connection) globalMap
						.get("conn_tMSSqlConnection_1");

				String dbschema_tMSSqlInput_1 = (String) globalMap
						.get("dbschema_tMSSqlConnection_1");

				java.sql.Statement stmt_tMSSqlInput_1 = conn_tMSSqlInput_1
						.createStatement();

				String dbquery_tMSSqlInput_1 = "SELECT DimCustomer.CustomerKey,\n		DimCustomer.GeographyKey,\n		DimCustomer.CustomerAlternateKey,\n		DimCustomer.Title,\n		DimCustomer.FirstName,\n		DimCustomer.MiddleName,\n		DimCustomer.LastName,\n		DimCustomer.NameStyle,\n		DimCustomer.BirthDate,\n		DimCustomer.MaritalStatus,\n		DimCustomer.Suffix,\n		DimCustomer.Gender,\n		DimCustomer.EmailAddress,\n		DimCustomer.YearlyIncome,\n		DimCustomer.TotalChildren,\n		DimCustomer.NumberChildrenAtHome,\n		DimCustomer.EnglishEducation,\n		DimCustomer.SpanishEducation,\n		DimCustomer.FrenchEducation,\n		DimCustomer.EnglishOccupation,\n		DimCustomer.SpanishOccupation,\n		DimCustomer.FrenchOccupation,\n		DimCustomer.HouseOwnerFlag,\n		DimCustomer.NumberCarsOwned,\n		DimCustomer.AddressLine1,\n		DimCustomer.AddressLine2,\n		DimCustomer.Phone,\n		DimCustomer.DateFirstPurchase,\n		DimCustomer.CommuteDistance\nFROM	DimCustomer";

				globalMap.put("tMSSqlInput_1_QUERY", dbquery_tMSSqlInput_1);

				java.sql.ResultSet rs_tMSSqlInput_1 = null;
				try {
					rs_tMSSqlInput_1 = stmt_tMSSqlInput_1
							.executeQuery(dbquery_tMSSqlInput_1);
					java.sql.ResultSetMetaData rsmd_tMSSqlInput_1 = rs_tMSSqlInput_1
							.getMetaData();
					int colQtyInRs_tMSSqlInput_1 = rsmd_tMSSqlInput_1
							.getColumnCount();

					String tmpContent_tMSSqlInput_1 = null;

					while (rs_tMSSqlInput_1.next()) {
						nb_line_tMSSqlInput_1++;

						if (colQtyInRs_tMSSqlInput_1 < 1) {
							row1.CustomerKey = 0;
						} else {

							if (rs_tMSSqlInput_1.getObject(1) != null) {
								row1.CustomerKey = rs_tMSSqlInput_1.getInt(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 2) {
							row1.GeographyKey = null;
						} else {

							if (rs_tMSSqlInput_1.getObject(2) != null) {
								row1.GeographyKey = rs_tMSSqlInput_1.getInt(2);
							} else {
								row1.GeographyKey = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 3) {
							row1.CustomerAlternateKey = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(3);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(3)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.CustomerAlternateKey = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.CustomerAlternateKey = tmpContent_tMSSqlInput_1
											.trim();
								}
							} else {
								row1.CustomerAlternateKey = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 4) {
							row1.Title = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(4);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(4)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.Title = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.Title = tmpContent_tMSSqlInput_1
											.trim();
								}
							} else {
								row1.Title = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 5) {
							row1.FirstName = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(5);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(5)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.FirstName = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.FirstName = tmpContent_tMSSqlInput_1
											.trim();
								}
							} else {
								row1.FirstName = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 6) {
							row1.MiddleName = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(6);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(6)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.MiddleName = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.MiddleName = tmpContent_tMSSqlInput_1
											.trim();
								}
							} else {
								row1.MiddleName = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 7) {
							row1.LastName = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(7);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(7)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.LastName = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.LastName = tmpContent_tMSSqlInput_1
											.trim();
								}
							} else {
								row1.LastName = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 8) {
							row1.NameStyle = null;
						} else {

							if (rs_tMSSqlInput_1.getObject(8) != null) {
								row1.NameStyle = rs_tMSSqlInput_1.getBoolean(8);
							} else {
								row1.NameStyle = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 9) {
							row1.BirthDate = null;
						} else {

							row1.BirthDate = mssqlGTU_tMSSqlInput_1.getDate(
									rsmd_tMSSqlInput_1, rs_tMSSqlInput_1, 9);

						}
						if (colQtyInRs_tMSSqlInput_1 < 10) {
							row1.MaritalStatus = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(10);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(10)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.MaritalStatus = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.MaritalStatus = tmpContent_tMSSqlInput_1
											.trim();
								}
							} else {
								row1.MaritalStatus = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 11) {
							row1.Suffix = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(11);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(11)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.Suffix = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.Suffix = tmpContent_tMSSqlInput_1
											.trim();
								}
							} else {
								row1.Suffix = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 12) {
							row1.Gender = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(12);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(12)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.Gender = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.Gender = tmpContent_tMSSqlInput_1
											.trim();
								}
							} else {
								row1.Gender = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 13) {
							row1.EmailAddress = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(13);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(13)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.EmailAddress = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.EmailAddress = tmpContent_tMSSqlInput_1
											.trim();
								}
							} else {
								row1.EmailAddress = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 14) {
							row1.YearlyIncome = null;
						} else {

							if (rs_tMSSqlInput_1.getObject(14) != null) {
								row1.YearlyIncome = rs_tMSSqlInput_1
										.getObject(14);
							} else {
								row1.YearlyIncome = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 15) {
							row1.TotalChildren = null;
						} else {

							if (rs_tMSSqlInput_1.getObject(15) != null) {
								row1.TotalChildren = rs_tMSSqlInput_1
										.getShort(15);
							} else {
								row1.TotalChildren = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 16) {
							row1.NumberChildrenAtHome = null;
						} else {

							if (rs_tMSSqlInput_1.getObject(16) != null) {
								row1.NumberChildrenAtHome = rs_tMSSqlInput_1
										.getShort(16);
							} else {
								row1.NumberChildrenAtHome = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 17) {
							row1.EnglishEducation = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(17);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(17)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.EnglishEducation = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.EnglishEducation = tmpContent_tMSSqlInput_1
											.trim();
								}
							} else {
								row1.EnglishEducation = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 18) {
							row1.SpanishEducation = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(18);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(18)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.SpanishEducation = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.SpanishEducation = tmpContent_tMSSqlInput_1
											.trim();
								}
							} else {
								row1.SpanishEducation = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 19) {
							row1.FrenchEducation = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(19);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(19)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.FrenchEducation = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.FrenchEducation = tmpContent_tMSSqlInput_1
											.trim();
								}
							} else {
								row1.FrenchEducation = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 20) {
							row1.EnglishOccupation = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(20);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(20)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.EnglishOccupation = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.EnglishOccupation = tmpContent_tMSSqlInput_1
											.trim();
								}
							} else {
								row1.EnglishOccupation = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 21) {
							row1.SpanishOccupation = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(21);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(21)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.SpanishOccupation = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.SpanishOccupation = tmpContent_tMSSqlInput_1
											.trim();
								}
							} else {
								row1.SpanishOccupation = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 22) {
							row1.FrenchOccupation = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(22);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(22)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.FrenchOccupation = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.FrenchOccupation = tmpContent_tMSSqlInput_1
											.trim();
								}
							} else {
								row1.FrenchOccupation = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 23) {
							row1.HouseOwnerFlag = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(23);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(23)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.HouseOwnerFlag = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.HouseOwnerFlag = tmpContent_tMSSqlInput_1
											.trim();
								}
							} else {
								row1.HouseOwnerFlag = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 24) {
							row1.NumberCarsOwned = null;
						} else {

							if (rs_tMSSqlInput_1.getObject(24) != null) {
								row1.NumberCarsOwned = rs_tMSSqlInput_1
										.getShort(24);
							} else {
								row1.NumberCarsOwned = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 25) {
							row1.AddressLine1 = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(25);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(25)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.AddressLine1 = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.AddressLine1 = tmpContent_tMSSqlInput_1
											.trim();
								}
							} else {
								row1.AddressLine1 = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 26) {
							row1.AddressLine2 = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(26);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(26)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.AddressLine2 = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.AddressLine2 = tmpContent_tMSSqlInput_1
											.trim();
								}
							} else {
								row1.AddressLine2 = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 27) {
							row1.Phone = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(27);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(27)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.Phone = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.Phone = tmpContent_tMSSqlInput_1
											.trim();
								}
							} else {
								row1.Phone = null;
							}
						}
						if (colQtyInRs_tMSSqlInput_1 < 28) {
							row1.DateFirstPurchase = null;
						} else {

							row1.DateFirstPurchase = mssqlGTU_tMSSqlInput_1
									.getDate(rsmd_tMSSqlInput_1,
											rs_tMSSqlInput_1, 28);

						}
						if (colQtyInRs_tMSSqlInput_1 < 29) {
							row1.CommuteDistance = null;
						} else {

							tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1
									.getString(29);
							if (tmpContent_tMSSqlInput_1 != null) {
								if (talendToDBList_tMSSqlInput_1
										.contains(rsmd_tMSSqlInput_1
												.getColumnTypeName(29)
												.toUpperCase(
														java.util.Locale.ENGLISH))) {
									row1.CommuteDistance = FormatterUtils
											.formatUnwithE(tmpContent_tMSSqlInput_1);
								} else {
									row1.CommuteDistance = tmpContent_tMSSqlInput_1
											.trim();
								}
							} else {
								row1.CommuteDistance = null;
							}
						}

						/**
						 * [tMSSqlInput_1 begin ] stop
						 */

						/**
						 * [tMSSqlInput_1 main ] start
						 */

						currentComponent = "tMSSqlInput_1";

						tos_count_tMSSqlInput_1++;

						/**
						 * [tMSSqlInput_1 main ] stop
						 */

						/**
						 * [tLogRow_1 main ] start
						 */

						currentComponent = "tLogRow_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						// /////////////////////

						strBuffer_tLogRow_1 = new StringBuilder();

						strBuffer_tLogRow_1.append(String
								.valueOf(row1.CustomerKey));

						strBuffer_tLogRow_1.append("|");

						if (row1.GeographyKey != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.GeographyKey));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.CustomerAlternateKey != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.CustomerAlternateKey));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.Title != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.Title));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.FirstName != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.FirstName));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.MiddleName != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.MiddleName));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.LastName != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.LastName));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.NameStyle != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.NameStyle));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.BirthDate != null) { //

							strBuffer_tLogRow_1.append(FormatterUtils
									.format_Date(row1.BirthDate, "dd-MM-yyyy"));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.MaritalStatus != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.MaritalStatus));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.Suffix != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.Suffix));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.Gender != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.Gender));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.EmailAddress != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.EmailAddress));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.YearlyIncome != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.YearlyIncome));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.TotalChildren != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.TotalChildren));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.NumberChildrenAtHome != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.NumberChildrenAtHome));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.EnglishEducation != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.EnglishEducation));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.SpanishEducation != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.SpanishEducation));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.FrenchEducation != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.FrenchEducation));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.EnglishOccupation != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.EnglishOccupation));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.SpanishOccupation != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.SpanishOccupation));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.FrenchOccupation != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.FrenchOccupation));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.HouseOwnerFlag != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.HouseOwnerFlag));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.NumberCarsOwned != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.NumberCarsOwned));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.AddressLine1 != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.AddressLine1));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.AddressLine2 != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.AddressLine2));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.Phone != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.Phone));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.DateFirstPurchase != null) { //

							strBuffer_tLogRow_1.append(FormatterUtils
									.format_Date(row1.DateFirstPurchase,
											"dd-MM-yyyy"));

						} //

						strBuffer_tLogRow_1.append("|");

						if (row1.CommuteDistance != null) { //

							strBuffer_tLogRow_1.append(String
									.valueOf(row1.CommuteDistance));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_1 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_1);
						}
						consoleOut_tLogRow_1.println(strBuffer_tLogRow_1
								.toString());
						consoleOut_tLogRow_1.flush();
						nb_line_tLogRow_1++;
						// ////

						// ////

						// /////////////////////

						tos_count_tLogRow_1++;

						/**
						 * [tLogRow_1 main ] stop
						 */

						/**
						 * [tMSSqlInput_1 end ] start
						 */

						currentComponent = "tMSSqlInput_1";

					}
				} finally {
					stmt_tMSSqlInput_1.close();

				}
				globalMap.put("tMSSqlInput_1_NB_LINE", nb_line_tMSSqlInput_1);

				ok_Hash.put("tMSSqlInput_1", true);
				end_Hash.put("tMSSqlInput_1", System.currentTimeMillis());

				/**
				 * [tMSSqlInput_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMSSqlInput_1 finally ] start
				 */

				currentComponent = "tMSSqlInput_1";

				/**
				 * [tMSSqlInput_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMSSqlInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final JoinExample JoinExampleClass = new JoinExample();

		int exitCode = JoinExampleClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = JoinExample.class.getClassLoader()
					.getResourceAsStream(
							"test/joinexample_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tMSSqlConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tMSSqlConnection_1) {
			globalMap.put("tMSSqlConnection_1_SUBPROCESS_STATE", -1);

			e_tMSSqlConnection_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : JoinExample");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tMSSqlConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tMSSqlConnection_1",
				globalMap.get("conn_tMSSqlConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 76664 characters generated by Talend Open Studio for Big Data on the November
 * 16, 2020 10:09:27 PM PST
 ************************************************************************************************/
